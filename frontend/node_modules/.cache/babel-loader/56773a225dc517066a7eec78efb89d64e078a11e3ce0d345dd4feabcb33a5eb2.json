{"ast":null,"code":"import React,{createContext,useContext,useState,useEffect}from'react';import{useNavigate}from'react-router-dom';import{authService}from'../services/api';import{jsx as _jsx}from\"react/jsx-runtime\";const initialState={isAuthenticated:false,user:null,loading:true,error:null};const AuthContext=/*#__PURE__*/createContext(undefined);export const useAuth=()=>{const context=useContext(AuthContext);if(!context){throw new Error('useAuth must be used within an AuthProvider');}return context;};export const AuthProvider=_ref=>{let{children}=_ref;const[authState,setAuthState]=useState(initialState);const navigate=useNavigate();// Check if user is already logged in\nuseEffect(()=>{const checkAuth=async()=>{try{const response=await authService.getCurrentUser();setAuthState({isAuthenticated:true,user:response.data.user,loading:false,error:null});}catch(error){setAuthState({isAuthenticated:false,user:null,loading:false,error:null});}};checkAuth();},[]);// Login function\nconst login=async(email,password)=>{setAuthState(prev=>({...prev,loading:true,error:null}));try{const response=await authService.login(email,password);setAuthState({isAuthenticated:true,user:response.data.user,loading:false,error:null});navigate('/');}catch(error){var _error$response,_error$response$data;setAuthState({isAuthenticated:false,user:null,loading:false,error:((_error$response=error.response)===null||_error$response===void 0?void 0:(_error$response$data=_error$response.data)===null||_error$response$data===void 0?void 0:_error$response$data.error)||'Login failed'});}};// Register function\nconst register=async(name,email,password)=>{setAuthState(prev=>({...prev,loading:true,error:null}));try{await authService.register(name,email,password);setAuthState(prev=>({...prev,loading:false}));navigate('/login');}catch(error){var _error$response2,_error$response2$data;setAuthState({isAuthenticated:false,user:null,loading:false,error:((_error$response2=error.response)===null||_error$response2===void 0?void 0:(_error$response2$data=_error$response2.data)===null||_error$response2$data===void 0?void 0:_error$response2$data.error)||'Registration failed'});}};// Logout function\nconst logout=async()=>{try{await authService.logout();setAuthState({isAuthenticated:false,user:null,loading:false,error:null});navigate('/login');}catch(error){setAuthState(prev=>{var _error$response3,_error$response3$data;return{...prev,error:((_error$response3=error.response)===null||_error$response3===void 0?void 0:(_error$response3$data=_error$response3.data)===null||_error$response3$data===void 0?void 0:_error$response3$data.error)||'Logout failed'};});}};const value={authState,login,register,logout};return/*#__PURE__*/_jsx(AuthContext.Provider,{value:value,children:children});};","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useNavigate","authService","jsx","_jsx","initialState","isAuthenticated","user","loading","error","AuthContext","undefined","useAuth","context","Error","AuthProvider","_ref","children","authState","setAuthState","navigate","checkAuth","response","getCurrentUser","data","login","email","password","prev","_error$response","_error$response$data","register","name","_error$response2","_error$response2$data","logout","_error$response3","_error$response3$data","value","Provider"],"sources":["/root/dev/swiftcrm/frontend/src/context/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { authService } from '../services/api';\nimport { AuthState, User } from '../types';\n\ninterface AuthContextProps {\n  authState: AuthState;\n  login: (email: string, password: string) => Promise<void>;\n  register: (name: string, email: string, password: string) => Promise<void>;\n  logout: () => Promise<void>;\n}\n\nconst initialState: AuthState = {\n  isAuthenticated: false,\n  user: null,\n  loading: true,\n  error: null\n};\n\nconst AuthContext = createContext<AuthContextProps | undefined>(undefined);\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\ninterface AuthProviderProps {\n  children: ReactNode;\n}\n\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\n  const [authState, setAuthState] = useState<AuthState>(initialState);\n  const navigate = useNavigate();\n\n  // Check if user is already logged in\n  useEffect(() => {\n    const checkAuth = async () => {\n      try {\n        const response = await authService.getCurrentUser();\n        setAuthState({\n          isAuthenticated: true,\n          user: response.data.user,\n          loading: false,\n          error: null\n        });\n      } catch (error) {\n        setAuthState({\n          isAuthenticated: false,\n          user: null,\n          loading: false,\n          error: null\n        });\n      }\n    };\n\n    checkAuth();\n  }, []);\n\n  // Login function\n  const login = async (email: string, password: string) => {\n    setAuthState(prev => ({ ...prev, loading: true, error: null }));\n    \n    try {\n      const response = await authService.login(email, password);\n      setAuthState({\n        isAuthenticated: true,\n        user: response.data.user,\n        loading: false,\n        error: null\n      });\n      navigate('/');\n    } catch (error: any) {\n      setAuthState({\n        isAuthenticated: false,\n        user: null,\n        loading: false,\n        error: error.response?.data?.error || 'Login failed'\n      });\n    }\n  };\n\n  // Register function\n  const register = async (name: string, email: string, password: string) => {\n    setAuthState(prev => ({ ...prev, loading: true, error: null }));\n    \n    try {\n      await authService.register(name, email, password);\n      setAuthState(prev => ({ ...prev, loading: false }));\n      navigate('/login');\n    } catch (error: any) {\n      setAuthState({\n        isAuthenticated: false,\n        user: null,\n        loading: false,\n        error: error.response?.data?.error || 'Registration failed'\n      });\n    }\n  };\n\n  // Logout function\n  const logout = async () => {\n    try {\n      await authService.logout();\n      setAuthState({\n        isAuthenticated: false,\n        user: null,\n        loading: false,\n        error: null\n      });\n      navigate('/login');\n    } catch (error: any) {\n      setAuthState(prev => ({\n        ...prev,\n        error: error.response?.data?.error || 'Logout failed'\n      }));\n    }\n  };\n\n  const value = {\n    authState,\n    login,\n    register,\n    logout\n  };\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}