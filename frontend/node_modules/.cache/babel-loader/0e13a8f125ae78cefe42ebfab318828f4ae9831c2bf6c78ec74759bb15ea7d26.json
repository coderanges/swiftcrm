{"ast":null,"code":"var _jsxFileName = \"/root/dev/swiftcrm/frontend/src/context/AuthContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { authService } from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  isAuthenticated: false,\n  user: null,\n  loading: true,\n  error: null\n};\nconst AuthContext = /*#__PURE__*/createContext(undefined);\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [authState, setAuthState] = useState(initialState);\n  const navigate = useNavigate();\n\n  // Check if user is already logged in\n  useEffect(() => {\n    const checkAuth = async () => {\n      try {\n        const response = await authService.getCurrentUser();\n        setAuthState({\n          isAuthenticated: true,\n          user: response.data.user,\n          loading: false,\n          error: null\n        });\n      } catch (error) {\n        setAuthState({\n          isAuthenticated: false,\n          user: null,\n          loading: false,\n          error: null\n        });\n      }\n    };\n    checkAuth();\n  }, []);\n\n  // Login function\n  const login = async (email, password) => {\n    setAuthState(prev => ({\n      ...prev,\n      loading: true,\n      error: null\n    }));\n    try {\n      const response = await authService.login(email, password);\n      setAuthState({\n        isAuthenticated: true,\n        user: response.data.user,\n        loading: false,\n        error: null\n      });\n      navigate('/');\n    } catch (error) {\n      var _error$response, _error$response$data;\n      setAuthState({\n        isAuthenticated: false,\n        user: null,\n        loading: false,\n        error: ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.error) || 'Login failed'\n      });\n    }\n  };\n\n  // Register function\n  const register = async (name, email, password) => {\n    setAuthState(prev => ({\n      ...prev,\n      loading: true,\n      error: null\n    }));\n    try {\n      await authService.register(name, email, password);\n      setAuthState(prev => ({\n        ...prev,\n        loading: false\n      }));\n      navigate('/login');\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      setAuthState({\n        isAuthenticated: false,\n        user: null,\n        loading: false,\n        error: ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.error) || 'Registration failed'\n      });\n    }\n  };\n\n  // Logout function\n  const logout = async () => {\n    try {\n      await authService.logout();\n      setAuthState({\n        isAuthenticated: false,\n        user: null,\n        loading: false,\n        error: null\n      });\n      navigate('/login');\n    } catch (error) {\n      setAuthState(prev => {\n        var _error$response3, _error$response3$data;\n        return {\n          ...prev,\n          error: ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.error) || 'Logout failed'\n        };\n      });\n    }\n  };\n  const value = {\n    authState,\n    login,\n    register,\n    logout\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 129,\n    columnNumber: 10\n  }, this);\n};\n_s2(AuthProvider, \"rQou5lrUHwGqa1lD7JF+KlhxAWI=\", false, function () {\n  return [useNavigate];\n});\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useNavigate","authService","jsxDEV","_jsxDEV","initialState","isAuthenticated","user","loading","error","AuthContext","undefined","useAuth","_s","context","Error","AuthProvider","children","_s2","authState","setAuthState","navigate","checkAuth","response","getCurrentUser","data","login","email","password","prev","_error$response","_error$response$data","register","name","_error$response2","_error$response2$data","logout","_error$response3","_error$response3$data","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/root/dev/swiftcrm/frontend/src/context/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { authService } from '../services/api';\nimport { AuthState, User } from '../types';\n\ninterface AuthContextProps {\n  authState: AuthState;\n  login: (email: string, password: string) => Promise<void>;\n  register: (name: string, email: string, password: string) => Promise<void>;\n  logout: () => Promise<void>;\n}\n\nconst initialState: AuthState = {\n  isAuthenticated: false,\n  user: null,\n  loading: true,\n  error: null\n};\n\nconst AuthContext = createContext<AuthContextProps | undefined>(undefined);\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\ninterface AuthProviderProps {\n  children: ReactNode;\n}\n\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\n  const [authState, setAuthState] = useState<AuthState>(initialState);\n  const navigate = useNavigate();\n\n  // Check if user is already logged in\n  useEffect(() => {\n    const checkAuth = async () => {\n      try {\n        const response = await authService.getCurrentUser();\n        setAuthState({\n          isAuthenticated: true,\n          user: response.data.user,\n          loading: false,\n          error: null\n        });\n      } catch (error) {\n        setAuthState({\n          isAuthenticated: false,\n          user: null,\n          loading: false,\n          error: null\n        });\n      }\n    };\n\n    checkAuth();\n  }, []);\n\n  // Login function\n  const login = async (email: string, password: string) => {\n    setAuthState(prev => ({ ...prev, loading: true, error: null }));\n    \n    try {\n      const response = await authService.login(email, password);\n      setAuthState({\n        isAuthenticated: true,\n        user: response.data.user,\n        loading: false,\n        error: null\n      });\n      navigate('/');\n    } catch (error: any) {\n      setAuthState({\n        isAuthenticated: false,\n        user: null,\n        loading: false,\n        error: error.response?.data?.error || 'Login failed'\n      });\n    }\n  };\n\n  // Register function\n  const register = async (name: string, email: string, password: string) => {\n    setAuthState(prev => ({ ...prev, loading: true, error: null }));\n    \n    try {\n      await authService.register(name, email, password);\n      setAuthState(prev => ({ ...prev, loading: false }));\n      navigate('/login');\n    } catch (error: any) {\n      setAuthState({\n        isAuthenticated: false,\n        user: null,\n        loading: false,\n        error: error.response?.data?.error || 'Registration failed'\n      });\n    }\n  };\n\n  // Logout function\n  const logout = async () => {\n    try {\n      await authService.logout();\n      setAuthState({\n        isAuthenticated: false,\n        user: null,\n        loading: false,\n        error: null\n      });\n      navigate('/login');\n    } catch (error: any) {\n      setAuthState(prev => ({\n        ...prev,\n        error: error.response?.data?.error || 'Logout failed'\n      }));\n    }\n  };\n\n  const value = {\n    authState,\n    login,\n    register,\n    logout\n  };\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n}; "],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAmB,OAAO;AACxF,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,WAAW,QAAQ,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAU9C,MAAMC,YAAuB,GAAG;EAC9BC,eAAe,EAAE,KAAK;EACtBC,IAAI,EAAE,IAAI;EACVC,OAAO,EAAE,IAAI;EACbC,KAAK,EAAE;AACT,CAAC;AAED,MAAMC,WAAW,gBAAGb,aAAa,CAA+Bc,SAAS,CAAC;AAE1E,OAAO,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAMC,OAAO,GAAGhB,UAAU,CAACY,WAAW,CAAC;EACvC,IAAI,CAACI,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,6CAA6C,CAAC;EAChE;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,EAAA,CANWD,OAAO;AAYpB,OAAO,MAAMI,YAAyC,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EACzE,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGrB,QAAQ,CAAYM,YAAY,CAAC;EACnE,MAAMgB,QAAQ,GAAGpB,WAAW,CAAC,CAAC;;EAE9B;EACAD,SAAS,CAAC,MAAM;IACd,MAAMsB,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMrB,WAAW,CAACsB,cAAc,CAAC,CAAC;QACnDJ,YAAY,CAAC;UACXd,eAAe,EAAE,IAAI;UACrBC,IAAI,EAAEgB,QAAQ,CAACE,IAAI,CAAClB,IAAI;UACxBC,OAAO,EAAE,KAAK;UACdC,KAAK,EAAE;QACT,CAAC,CAAC;MACJ,CAAC,CAAC,OAAOA,KAAK,EAAE;QACdW,YAAY,CAAC;UACXd,eAAe,EAAE,KAAK;UACtBC,IAAI,EAAE,IAAI;UACVC,OAAO,EAAE,KAAK;UACdC,KAAK,EAAE;QACT,CAAC,CAAC;MACJ;IACF,CAAC;IAEDa,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMI,KAAK,GAAG,MAAAA,CAAOC,KAAa,EAAEC,QAAgB,KAAK;IACvDR,YAAY,CAACS,IAAI,KAAK;MAAE,GAAGA,IAAI;MAAErB,OAAO,EAAE,IAAI;MAAEC,KAAK,EAAE;IAAK,CAAC,CAAC,CAAC;IAE/D,IAAI;MACF,MAAMc,QAAQ,GAAG,MAAMrB,WAAW,CAACwB,KAAK,CAACC,KAAK,EAAEC,QAAQ,CAAC;MACzDR,YAAY,CAAC;QACXd,eAAe,EAAE,IAAI;QACrBC,IAAI,EAAEgB,QAAQ,CAACE,IAAI,CAAClB,IAAI;QACxBC,OAAO,EAAE,KAAK;QACdC,KAAK,EAAE;MACT,CAAC,CAAC;MACFY,QAAQ,CAAC,GAAG,CAAC;IACf,CAAC,CAAC,OAAOZ,KAAU,EAAE;MAAA,IAAAqB,eAAA,EAAAC,oBAAA;MACnBX,YAAY,CAAC;QACXd,eAAe,EAAE,KAAK;QACtBC,IAAI,EAAE,IAAI;QACVC,OAAO,EAAE,KAAK;QACdC,KAAK,EAAE,EAAAqB,eAAA,GAAArB,KAAK,CAACc,QAAQ,cAAAO,eAAA,wBAAAC,oBAAA,GAAdD,eAAA,CAAgBL,IAAI,cAAAM,oBAAA,uBAApBA,oBAAA,CAAsBtB,KAAK,KAAI;MACxC,CAAC,CAAC;IACJ;EACF,CAAC;;EAED;EACA,MAAMuB,QAAQ,GAAG,MAAAA,CAAOC,IAAY,EAAEN,KAAa,EAAEC,QAAgB,KAAK;IACxER,YAAY,CAACS,IAAI,KAAK;MAAE,GAAGA,IAAI;MAAErB,OAAO,EAAE,IAAI;MAAEC,KAAK,EAAE;IAAK,CAAC,CAAC,CAAC;IAE/D,IAAI;MACF,MAAMP,WAAW,CAAC8B,QAAQ,CAACC,IAAI,EAAEN,KAAK,EAAEC,QAAQ,CAAC;MACjDR,YAAY,CAACS,IAAI,KAAK;QAAE,GAAGA,IAAI;QAAErB,OAAO,EAAE;MAAM,CAAC,CAAC,CAAC;MACnDa,QAAQ,CAAC,QAAQ,CAAC;IACpB,CAAC,CAAC,OAAOZ,KAAU,EAAE;MAAA,IAAAyB,gBAAA,EAAAC,qBAAA;MACnBf,YAAY,CAAC;QACXd,eAAe,EAAE,KAAK;QACtBC,IAAI,EAAE,IAAI;QACVC,OAAO,EAAE,KAAK;QACdC,KAAK,EAAE,EAAAyB,gBAAA,GAAAzB,KAAK,CAACc,QAAQ,cAAAW,gBAAA,wBAAAC,qBAAA,GAAdD,gBAAA,CAAgBT,IAAI,cAAAU,qBAAA,uBAApBA,qBAAA,CAAsB1B,KAAK,KAAI;MACxC,CAAC,CAAC;IACJ;EACF,CAAC;;EAED;EACA,MAAM2B,MAAM,GAAG,MAAAA,CAAA,KAAY;IACzB,IAAI;MACF,MAAMlC,WAAW,CAACkC,MAAM,CAAC,CAAC;MAC1BhB,YAAY,CAAC;QACXd,eAAe,EAAE,KAAK;QACtBC,IAAI,EAAE,IAAI;QACVC,OAAO,EAAE,KAAK;QACdC,KAAK,EAAE;MACT,CAAC,CAAC;MACFY,QAAQ,CAAC,QAAQ,CAAC;IACpB,CAAC,CAAC,OAAOZ,KAAU,EAAE;MACnBW,YAAY,CAACS,IAAI;QAAA,IAAAQ,gBAAA,EAAAC,qBAAA;QAAA,OAAK;UACpB,GAAGT,IAAI;UACPpB,KAAK,EAAE,EAAA4B,gBAAA,GAAA5B,KAAK,CAACc,QAAQ,cAAAc,gBAAA,wBAAAC,qBAAA,GAAdD,gBAAA,CAAgBZ,IAAI,cAAAa,qBAAA,uBAApBA,qBAAA,CAAsB7B,KAAK,KAAI;QACxC,CAAC;MAAA,CAAC,CAAC;IACL;EACF,CAAC;EAED,MAAM8B,KAAK,GAAG;IACZpB,SAAS;IACTO,KAAK;IACLM,QAAQ;IACRI;EACF,CAAC;EAED,oBAAOhC,OAAA,CAACM,WAAW,CAAC8B,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAAtB,QAAA,EAAEA;EAAQ;IAAAwB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAuB,CAAC;AAC9E,CAAC;AAAC1B,GAAA,CAhGWF,YAAyC;EAAA,QAEnCf,WAAW;AAAA;AAAA4C,EAAA,GAFjB7B,YAAyC;AAAA,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}